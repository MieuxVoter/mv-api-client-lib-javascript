/**
 * Majority Judgment API
 * This is a **deliberation service** using **majority judgment** polling. It's **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr). You're browsing the API documentation and sandbox.  ## Use one of the known clients  - TODO: add an URL to a client of the API   ## Try it out the hard way  ### Create an account  You will need a user account to interact with polls. Head to **Registration** â†’ `POST /users` below. Click _Try it out_, set your desired credentials, and execute the query. Scroll down to see the response.  ### Authenticate  Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour. Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button.  ### Create a poll  **Poll** â†’ `POST /polls`  Keep the response, you'll need the uuids.  > TODO: document invitation generation  ### Submit judgments  **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`  One request per proposal, for now.  We plan on making an endpoint to submit them all at once.  ### Collect the results  **Result** â†’ `GET /polls/{id}/result`  ## Use a generated client library  - for php  (link!) - for typescript-node  (link!!) - â€¦  There are clients we can generate for most languages. Get in touch if you'd like one in particular! Or clone this project and use `bin/generate-client.bash -t whatever`. 
 *
 * The version of the OpenAPI document: 0.0.0-dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PollRead from './PollRead';

/**
 * The InvitationRead model module.
 * @module MieuxVoter/model/InvitationRead
 * @version 0.0.0-dev
 */
class InvitationRead {
    /**
     * Constructs a new <code>InvitationRead</code>.
     * An invitation to a poll.
     * @alias module:MieuxVoter/model/InvitationRead
     */
    constructor() { 
        
        InvitationRead.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvitationRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:MieuxVoter/model/InvitationRead} obj Optional instance to populate.
     * @return {module:MieuxVoter/model/InvitationRead} The populated <code>InvitationRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvitationRead();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('poll')) {
                obj['poll'] = PollRead.constructFromObject(data['poll']);
            }
            if (data.hasOwnProperty('accepted')) {
                obj['accepted'] = ApiClient.convertToType(data['accepted'], 'Boolean');
            }
            if (data.hasOwnProperty('acceptedByYou')) {
                obj['acceptedByYou'] = ApiClient.convertToType(data['acceptedByYou'], 'Boolean');
            }
        }
        return obj;
    }

/**
     * Returns Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92
     * @return {String}
     */
    getUuid() {
        return this.uuid;
    }

    /**
     * Sets Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92
     * @param {String} uuid Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92
     */
    setUuid(uuid) {
        this['uuid'] = uuid;
    }
/**
     * @return {module:MieuxVoter/model/PollRead}
     */
    getPoll() {
        return this.poll;
    }

    /**
     * @param {module:MieuxVoter/model/PollRead} poll
     */
    setPoll(poll) {
        this['poll'] = poll;
    }
/**
     * Returns Whether this invitation was accepted by someone already.
     * @return {Boolean}
     */
    getAccepted() {
        return this.accepted;
    }

    /**
     * Sets Whether this invitation was accepted by someone already.
     * @param {Boolean} accepted Whether this invitation was accepted by someone already.
     */
    setAccepted(accepted) {
        this['accepted'] = accepted;
    }
/**
     * Returns Whether this invitation was accepted by the current user.
     * @return {Boolean}
     */
    getAcceptedByYou() {
        return this.acceptedByYou;
    }

    /**
     * Sets Whether this invitation was accepted by the current user.
     * @param {Boolean} acceptedByYou Whether this invitation was accepted by the current user.
     */
    setAcceptedByYou(acceptedByYou) {
        this['acceptedByYou'] = acceptedByYou;
    }

}

/**
 * Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92
 * @member {String} uuid
 */
InvitationRead.prototype['uuid'] = undefined;

/**
 * @member {module:MieuxVoter/model/PollRead} poll
 */
InvitationRead.prototype['poll'] = undefined;

/**
 * Whether this invitation was accepted by someone already.
 * @member {Boolean} accepted
 */
InvitationRead.prototype['accepted'] = undefined;

/**
 * Whether this invitation was accepted by the current user.
 * @member {Boolean} acceptedByYou
 */
InvitationRead.prototype['acceptedByYou'] = undefined;






export default InvitationRead;


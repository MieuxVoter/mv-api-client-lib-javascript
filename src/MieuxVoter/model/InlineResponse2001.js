/**
 * Majority Judgment API
 * This is a **deliberation service** using **majority judgment** polling. It's **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr). You're browsing the API documentation and sandbox.  ## Use one of the known clients  - TODO: add an URL to a client of the API   ## Try it out the hard way  ### Create an account  You will need a user account to interact with polls. Head to **Registration** â†’ `POST /users` below. Click _Try it out_, set your desired credentials, and execute the query. Scroll down to see the response.  ### Authenticate  Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour. Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button.  ### Create a poll  **Poll** â†’ `POST /polls`  Keep the response, you'll need the uuids.  > TODO: document invitation generation  ### Submit judgments  **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`  One request per proposal, for now.  We plan on making an endpoint to submit them all at once.  ### Collect the results  **Result** â†’ `GET /polls/{id}/result`  ## Use a generated client library  - for php  (link!) - for typescript-node  (link!!) - â€¦  There are clients we can generate for most languages. Get in touch if you'd like one in particular! Or clone this project and use `bin/generate-client.bash -t whatever`. 
 *
 * The version of the OpenAPI document: 0.0.0-dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse200HydraSearch from './InlineResponse200HydraSearch';
import InlineResponse200HydraView from './InlineResponse200HydraView';
import PolljsonldRead from './PolljsonldRead';

/**
 * The InlineResponse2001 model module.
 * @module MieuxVoter/model/InlineResponse2001
 * @version 0.0.0-dev
 */
class InlineResponse2001 {
    /**
     * Constructs a new <code>InlineResponse2001</code>.
     * @alias module:MieuxVoter/model/InlineResponse2001
     * @param hydramember {Array.<module:MieuxVoter/model/PolljsonldRead>} 
     */
    constructor(hydramember) { 
        
        InlineResponse2001.initialize(this, hydramember);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hydramember) { 
        obj['hydra:member'] = hydramember;
    }

    /**
     * Constructs a <code>InlineResponse2001</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:MieuxVoter/model/InlineResponse2001} obj Optional instance to populate.
     * @return {module:MieuxVoter/model/InlineResponse2001} The populated <code>InlineResponse2001</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2001();

            if (data.hasOwnProperty('hydra:member')) {
                obj['hydra:member'] = ApiClient.convertToType(data['hydra:member'], [PolljsonldRead]);
            }
            if (data.hasOwnProperty('hydra:totalItems')) {
                obj['hydra:totalItems'] = ApiClient.convertToType(data['hydra:totalItems'], 'Number');
            }
            if (data.hasOwnProperty('hydra:view')) {
                obj['hydra:view'] = InlineResponse200HydraView.constructFromObject(data['hydra:view']);
            }
            if (data.hasOwnProperty('hydra:search')) {
                obj['hydra:search'] = InlineResponse200HydraSearch.constructFromObject(data['hydra:search']);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:MieuxVoter/model/PolljsonldRead>} hydra:member
 */
InlineResponse2001.prototype['hydra:member'] = undefined;

/**
 * @member {Number} hydra:totalItems
 */
InlineResponse2001.prototype['hydra:totalItems'] = undefined;

/**
 * @member {module:MieuxVoter/model/InlineResponse200HydraView} hydra:view
 */
InlineResponse2001.prototype['hydra:view'] = undefined;

/**
 * @member {module:MieuxVoter/model/InlineResponse200HydraSearch} hydra:search
 */
InlineResponse2001.prototype['hydra:search'] = undefined;






export default InlineResponse2001;

